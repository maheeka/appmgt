<%
/*
 * Copyright (c) 2016, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.
 *
 *   WSO2 Inc. licenses this file to you under the Apache License,
 *   Version 2.0 (the "License"); you may not use this file except
 *   in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing,
 *   software distributed under the License is distributed on an
 *   "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 *   KIND, either express or implied.  See the License for the
 *   specific language governing permissions and limitations
 *   under the License.
 */

include("/jagg/jagg.jag");

var log = new Log("module/runtimeLogs/runtimeLogs.jag");
var modManager = jagg.module("manager");
var Util = Packages.org.wso2.appcloud.core.Util;
var ApplicationManager = Packages.org.wso2.appcloud.core.ApplicationManager;
var KubernetesRuntime = Packages.org.wso2.appcloud.provisioning.runtime.KubernetesRuntimeProvisioningService;
var KubernetesProvisioningUtils = Packages.org.wso2.appcloud.provisioning.runtime.Utils.KubernetesProvisioningUtils;
var DeploymentLogs = Packages.org.wso2.appcloud.provisioning.runtime.beans.DeploymentLogs;
var DeploymentLogStream = Packages.org.wso2.appcloud.provisioning.runtime.beans.DeploymentLogStream;

var getRuntimeLogs = function (applicationKey, selectedRevision, applicationType, isStream) {

    var deploymentLog;
    var applicationName = ApplicationManager.getApplicationNameByHashId(applicationKey);
    var versionHashId = Util.getVersionHashId(applicationName, selectedRevision, modManager.getTenantId());

    try {
        var applicationCtx = KubernetesProvisioningUtils.getApplicationContext(applicationName, selectedRevision,
                                                                               applicationType,
                                                                               modManager.getTenantId(),
                                                                               modManager.getTenantDomain(), versionHashId);
        var kubService = new KubernetesRuntime(applicationCtx);
        if (isStream){
            return kubService.streamRuntimeLogs();
        } else {
            return kubService.getRuntimeLogs(null);
        }
    } catch(e){
        log.error("Error while getting runtime logs for application : " + applicationName + " revision : " + selectedRevision);
        log.error(e);
        throw e;
    }
}

var getFormattedRuntimeLogs = function (applicationKey, selectedRevision, applicationType, isFirstRequest) {
    var sessionKey = "RUNTIME_LOGS_" + applicationKey + "_" + selectedRevision;
    var result = session.get(sessionKey);
    if (result && isFirstRequest === 'true' && result instanceof DeploymentLogStream){
        try {
            result.closeAllLogStreams();
        } catch (e){
            log.warn("Stream already closed.");
        }
        result = null;
    }
    if (result == null || isFirstRequest === 'true'){
        log.info("Acquiring streams of logs for applicationKey : " + applicationKey + ", selectedRevision : " + selectedRevision);
        result = getRuntimeLogs(applicationKey, selectedRevision, applicationType, true);
        session.put(sessionKey, result);
    }
    var logMap = {};
    if (result instanceof DeploymentLogStream){
        var map = result.getDeploymentLogs();
        if(map && map.entrySet()) {
            var iterator = map.entrySet().iterator();
            while (iterator.hasNext()) {
                var entry = iterator.next();
                var logContent = result.getLogContent(entry.getKey());
                logMap[entry.getKey()] = logContent;
            }
        }
        if(isFirstRequest === 'true'){
            setTimeout(
                function(){
                    try {
                        result.closeAllLogStreams();
                    } catch (e){
                        log.warn("Stream already closed.");
                    }
                }, 900000);
        }
        return logMap;
    } else {
        throw "Error while calling mod.getRuntimeLogs. Results are not instances of DeploymentLogs";
    }
}

var getDownloadableRuntimeLogs = function (applicationKey, selectedRevision, applicationType) {
    var result = getRuntimeLogs(applicationKey, selectedRevision, applicationType, false);
    var logMap = {};
    if (result instanceof DeploymentLogs){
        var map = result.getDeploymentLogs();
        if(map && map.entrySet()) {
            var iterator = map.entrySet().iterator();
            while (iterator.hasNext()) {
                var entry = iterator.next();
                logMap[entry.getKey()] = entry.getValue().toString();
            }
        }
        return logMap;
    } else {
        throw "Error while calling mod.getRuntimeLogs. Results are not instances of DeploymentLogs";
    }
}